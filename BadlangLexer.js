// Generated from Badlang.g4 by ANTLR 4.9.2
// jshint ignore: start
import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\rY\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0003\u0002\u0003\u0002\u0006\u0002\u001c\n\u0002\r\u0002\u000e",
    "\u0002\u001d\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\n\u0006\n",
    "2\n\n\r\n\u000e\n3\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0006",
    "\u000b:\n\u000b\r\u000b\u000e\u000b;\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0006\u000bC\n\u000b\r\u000b\u000e\u000bD\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0006\u000bJ\n\u000b\r\u000b\u000e\u000b",
    "K\u0005\u000bN\n\u000b\u0003\u000b\u0003\u000b\u0003\f\u0007\fS\n\f",
    "\f\f\u000e\fV\u000b\f\u0003\f\u0003\f\u0005\u001d;D\u0002\r\u0003\u0003",
    "\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013",
    "\u000b\u0015\f\u0017\r\u0003\u0002\u0007\u0003\u00022;\u0004\u0002\f",
    "\f\u000f\u000f\u0005\u0002\u000b\f\u000f\u000f\"\"\u0006\u000200C\\",
    "aac|\u0005\u0002C\\aac|\u0002`\u0002\u0003\u0003\u0002\u0002\u0002\u0002",
    "\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002",
    "\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002",
    "\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002",
    "\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002",
    "\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0003",
    "\u0019\u0003\u0002\u0002\u0002\u0005!\u0003\u0002\u0002\u0002\u0007",
    "#\u0003\u0002\u0002\u0002\t%\u0003\u0002\u0002\u0002\u000b\'\u0003\u0002",
    "\u0002\u0002\r)\u0003\u0002\u0002\u0002\u000f+\u0003\u0002\u0002\u0002",
    "\u0011-\u0003\u0002\u0002\u0002\u00131\u0003\u0002\u0002\u0002\u0015",
    "M\u0003\u0002\u0002\u0002\u0017T\u0003\u0002\u0002\u0002\u0019\u001b",
    "\u0007)\u0002\u0002\u001a\u001c\u000b\u0002\u0002\u0002\u001b\u001a",
    "\u0003\u0002\u0002\u0002\u001c\u001d\u0003\u0002\u0002\u0002\u001d\u001e",
    "\u0003\u0002\u0002\u0002\u001d\u001b\u0003\u0002\u0002\u0002\u001e\u001f",
    "\u0003\u0002\u0002\u0002\u001f \u0007)\u0002\u0002 \u0004\u0003\u0002",
    "\u0002\u0002!\"\u0007*\u0002\u0002\"\u0006\u0003\u0002\u0002\u0002#",
    "$\u0007+\u0002\u0002$\b\u0003\u0002\u0002\u0002%&\u0007-\u0002\u0002",
    "&\n\u0003\u0002\u0002\u0002\'(\u0007/\u0002\u0002(\f\u0003\u0002\u0002",
    "\u0002)*\u0007,\u0002\u0002*\u000e\u0003\u0002\u0002\u0002+,\u00071",
    "\u0002\u0002,\u0010\u0003\u0002\u0002\u0002-.\u0007,\u0002\u0002./\u0007",
    ",\u0002\u0002/\u0012\u0003\u0002\u0002\u000202\t\u0002\u0002\u00021",
    "0\u0003\u0002\u0002\u000223\u0003\u0002\u0002\u000231\u0003\u0002\u0002",
    "\u000234\u0003\u0002\u0002\u00024\u0014\u0003\u0002\u0002\u000256\u0007",
    "1\u0002\u000267\u00071\u0002\u000279\u0003\u0002\u0002\u00028:\u000b",
    "\u0002\u0002\u000298\u0003\u0002\u0002\u0002:;\u0003\u0002\u0002\u0002",
    ";<\u0003\u0002\u0002\u0002;9\u0003\u0002\u0002\u0002<=\u0003\u0002\u0002",
    "\u0002=N\t\u0003\u0002\u0002>?\u00071\u0002\u0002?@\u0007,\u0002\u0002",
    "@B\u0003\u0002\u0002\u0002AC\u000b\u0002\u0002\u0002BA\u0003\u0002\u0002",
    "\u0002CD\u0003\u0002\u0002\u0002DE\u0003\u0002\u0002\u0002DB\u0003\u0002",
    "\u0002\u0002EF\u0003\u0002\u0002\u0002FG\u0007,\u0002\u0002GN\u0007",
    "1\u0002\u0002HJ\t\u0004\u0002\u0002IH\u0003\u0002\u0002\u0002JK\u0003",
    "\u0002\u0002\u0002KI\u0003\u0002\u0002\u0002KL\u0003\u0002\u0002\u0002",
    "LN\u0003\u0002\u0002\u0002M5\u0003\u0002\u0002\u0002M>\u0003\u0002\u0002",
    "\u0002MI\u0003\u0002\u0002\u0002NO\u0003\u0002\u0002\u0002OP\b\u000b",
    "\u0002\u0002P\u0016\u0003\u0002\u0002\u0002QS\t\u0005\u0002\u0002RQ",
    "\u0003\u0002\u0002\u0002SV\u0003\u0002\u0002\u0002TR\u0003\u0002\u0002",
    "\u0002TU\u0003\u0002\u0002\u0002UW\u0003\u0002\u0002\u0002VT\u0003\u0002",
    "\u0002\u0002WX\t\u0006\u0002\u0002X\u0018\u0003\u0002\u0002\u0002\n",
    "\u0002\u001d3;DKMT\u0003\b\u0002\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class BadlangLexer extends antlr4.Lexer {

    static grammarFileName = "Badlang.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, "'('", "')'", "'+'", "'-'", "'*'", 
                         "'/'", "'**'" ];
	static symbolicNames = [ null, "STRING", "OPEN", "CLOSE", "PLUS", "MINUS", 
                          "MULTYPLY", "DIV", "POW", "INTEGER", "WS", "NAME" ];
	static ruleNames = [ "STRING", "OPEN", "CLOSE", "PLUS", "MINUS", "MULTYPLY", 
                      "DIV", "POW", "INTEGER", "WS", "NAME" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

BadlangLexer.EOF = antlr4.Token.EOF;
BadlangLexer.STRING = 1;
BadlangLexer.OPEN = 2;
BadlangLexer.CLOSE = 3;
BadlangLexer.PLUS = 4;
BadlangLexer.MINUS = 5;
BadlangLexer.MULTYPLY = 6;
BadlangLexer.DIV = 7;
BadlangLexer.POW = 8;
BadlangLexer.INTEGER = 9;
BadlangLexer.WS = 10;
BadlangLexer.NAME = 11;



